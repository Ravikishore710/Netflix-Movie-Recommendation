# 🎬 **Netflix Movie Recommendation System**
## 📌 **Introduction**
This project builds a **movie recommendation system** using **Collaborative Filtering and Matrix Factorization (SVD - Singular Value Decomposition)**.  
The dataset includes **movie titles, genres, and IMDb scores**, which are used to predict missing ratings and generate personalized movie recommendations for users.  

The primary goal is to **predict movie ratings for users** and recommend movies they might like based on **patterns in user preferences**.

---

## 🔹 **Step-by-Step Explanation of the Code**

### **1️⃣ Loading and Preprocessing the Data**
The dataset is loaded and **preprocessed** to ensure clean and usable data:  
✔ **IMDb scores are extracted** and converted into a float format.  
✔ Missing values are removed to avoid errors.  
✔ Only relevant columns (**Title, Genres, IMDb Score**) are selected.

---

### **2️⃣ Visualizing IMDb Score Distribution**
Before building the recommendation system, **exploratory data analysis (EDA)** is performed:  
✔ A **histogram of IMDb scores** is plotted using `seaborn.histplot()`.  
✔ Helps understand whether scores are **normally distributed or skewed**.

---

### **3️⃣ Creating a User-Movie Rating Matrix**
To build a recommendation system, we create a **user-movie rating matrix**, where:  
✔ **Rows represent users** and **columns represent movies**.  
✔ **Values represent ratings** (IMDb scores).  
✔ **Each user rates only a subset of movies**, making the matrix **sparse**.  

📝 **Why is this important?**  
- In real-world applications, users don’t rate every movie.  
- We must handle missing values effectively.  

---

### **4️⃣ Performing SVD (Singular Value Decomposition)**
We apply **Matrix Factorization** using **SVD (Singular Value Decomposition)**:  

✔ **SVD decomposes the rating matrix** into three smaller matrices:  
   - **U (User Preferences Matrix)**  
   - **Σ (Sigma - Latent Factors Matrix)**  
   - **Vt (Movie Features Matrix)**  
✔ The **Sigma matrix is diagonalized** to reconstruct missing ratings.  

📝 **Why use SVD?**  
- It **captures hidden relationships** between users and movies.  
- It **fills in missing ratings** and **improves recommendations**.  

---

### **5️⃣ Visualizing Singular Values (Latent Factor Importance)**
To understand **the importance of latent factors**, we **plot singular values**:  
✔ Helps identify how much **each factor contributes to the recommendations**.  
✔ If singular values **decline steeply**, only a few factors matter.  

📊 **A well-performing model should show a gradual decline, not a sudden drop.**

---

### **6️⃣ Reconstructing the User-Movie Rating Matrix**
After applying **SVD**, we **reconstruct the user-movie rating matrix**:  
✔ Missing ratings are **filled in** based on patterns learned from data.  
✔ This **enables predictions** for movies a user hasn’t rated yet.  

---

### **7️⃣ Comparing Actual vs. Predicted Ratings**
A **scatter plot is used** to compare:  
✔ **Actual IMDb scores** (original ratings).  
✔ **Predicted IMDb scores** (generated by SVD).  

📊 **This helps evaluate the model’s accuracy.**  
- **If predicted scores align with actual scores**, the model is working well.  
- **If there’s a large deviation**, the model may need fine-tuning.  

---

### **8️⃣ Recommending Movies for a User**
To recommend movies, we:  
1️⃣ Extract **predicted ratings** for a user.  
2️⃣ Sort the movies **by predicted rating (highest to lowest).**  
3️⃣ Select **the top `N` movies** as recommendations.  

💡 **Example:**  
For **User 0**, the system recommends **the top 5 movies** based on their predicted ratings.

---

### **9️⃣ Visualizing Top Recommended Movies**
The final visualization displays:  
✔ **Top recommended movies for a user** using a **bar chart**.  
✔ Helps in understanding **which movies are ranked highest** for a user.  

📊 **Each bar represents a recommended movie and its ranking.**

---

## 🔹 **Why Use SVD for Movie Recommendation?**
### ✅ **Advantages of SVD for Recommendations**
✔ **Captures Hidden Relationships** – Finds latent features connecting users and movies.  
✔ **Handles Sparse Data** – Works well even if users rate only a few movies.  
✔ **Scalable** – Efficient for large datasets.  
✔ **Predicts Missing Ratings** – Provides recommendations based on inferred preferences.  

### ❌ **Why Not Use Simple Filtering Techniques?**
🚫 **Content-Based Filtering** only considers genres and ignores user preferences.  
🚫 **Basic Collaborative Filtering** fails with **sparse data** (few ratings per user).  
🚫 **SVD learns deeper patterns** and **predicts ratings more accurately**.

---

## **🎯 Summary**
This project successfully builds a **Netflix Movie Recommendation System** using **SVD-based Collaborative Filtering**.  

### 🔥 **Key Takeaways:**
✔ **IMDb Scores are used as real user ratings** instead of random values.  
✔ **Matrix Factorization (SVD) helps predict missing ratings.**  
✔ **Multiple visualizations analyze the data and evaluate the model.**  
✔ **A user-movie rating matrix is created and optimized for recommendations.**  
✔ **The final output is a list of top recommended movies for a user.**  

🚀 **Future Improvements:**  
✅ **Alternating Least Squares (ALS)** for better accuracy.  
✅ **Hybrid Recommendation Models** combining **Content + Collaborative Filtering**.  
✅ **Deep Learning techniques (Neural Networks, Autoencoders)**.  

💡 **This approach can be extended to real-world platforms like Netflix and Amazon Prime!**
